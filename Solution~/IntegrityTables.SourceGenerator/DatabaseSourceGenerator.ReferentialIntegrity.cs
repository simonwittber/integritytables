using System.Text;
using IntegrityTables.SourceGeneration.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace IntegrityTables.SourceGeneration;

public partial class DatabaseSourceGenerator
{
    private void BuildReferentialIntegrityMethods(SourceProductionContext context, DatabaseModel model)
    {
        foreach (var table in model.Tables)
        {
            var sb = new StringBuilder();
            sb.AppendLine($@"// <auto-generated/> // {DatabaseSourceGenerator.GenerationStamp()}
using System;
using System.Collections.Generic;
using IntegrityTables;
");
            if (!string.IsNullOrEmpty(model.NameSpace))
            {
                sb.AppendLine($"namespace {model.NameSpace}");
                sb.AppendLine("{");
            }

            sb.AppendLine($"    public partial class {model.DatabaseSymbol.Name} {{");
            sb.AppendLine();
            sb.AppendLine($"        public Table<{table.QualifiedTypeName}> {table.TypeName}Table => this.{table.FieldName};");
            var tableTypeName = table.QualifiedTypeName;
            var tableFieldName = table.FieldName;
            sb.AppendLine();
            BuildUpdateMethod(sb, table);
            sb.AppendLine();
            BuildRemoveMethod(sb, table);
            sb.AppendLine();
            BuildAddMethod(sb, table);
            sb.AppendLine();
            sb.AppendLine("    }");
            if (!string.IsNullOrEmpty(model.NameSpace))
            {
                sb.AppendLine("}");
            }
            context.AddSource($"{model.FileName("ReferentialIntegrity", table.TypeName)}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }

    private static void BuildRemoveMethod(StringBuilder sb, TableModel table)
    {
        var tableFieldName = table.FieldName;

        var tableTypeName = table.QualifiedTypeName;
        sb.AppendLine($@"        // {DatabaseSourceGenerator.GenerationStamp()}
        private void ExecuteCascadingRemove{table.TypeName}Row(int id, CascadeOperation cascade) {{
            var row = this.{tableFieldName}.Get(id);
            var data = row.data;");
        foreach (var dependentField in table.Dependencies)
        {
            var dependentTableFieldName = dependentField.TableModel.FieldName;
            var errorMessage = $"\"{dependentTableFieldName}.{dependentField.Name} contains reference to {table.FieldName}\"";
            sb.AppendLine($@"
            // remove all dependent rows from {dependentTableFieldName}      
            for(var i = {dependentTableFieldName}.Count - 1; i >= 0; i--)
            {{
                var xrow = {dependentTableFieldName}[i];
                if(xrow.data.{dependentField.Name} != id) continue;
                switch(cascade) 
                {{
                    case CascadeOperation.None:
                        {table.FieldName}.RaiseException({errorMessage});
                        break;
                    case CascadeOperation.Delete:
                        {dependentTableFieldName}.Remove(xrow.id, cascade);
                        break;
                    case CascadeOperation.SetNull:  
{GenerateSetNullBlock(dependentField)}                                          
                }}
            }}");

            string GenerateSetNullBlock(FieldModel fieldModel)
            {
                if (fieldModel.IsNotNull)
                    return $"                        throw new InvalidOperationException(\"{fieldModel.Name} is marked NotNull\");";
                return @$"                        var copy = {fieldModel.TableModel.FacadeName}.Get(xrow.id); 
                        copy.data.{fieldModel.Name} = 0; 
                        {fieldModel.TableModel.FacadeName}.Update(ref copy); 
                        break;";
            }
        }
        sb.AppendLine("        }");
    }

    private static void BuildUpdateMethod(StringBuilder sb, TableModel table)
    {
        var tableFieldName = table.FieldName;
        var refCheckBuilder = new StringBuilder();
        foreach (var refField in table.Fields)
        {
            if (!refField.IsReference) continue;
            if (refField.IsImmutable) continue;
            var refTableFieldName = refField.ReferencedTableModel.FieldName;
            var refFieldName = refField.FieldSymbol.Name;
            var errorMessage = $"{refFieldName} is not a valid reference to {refTableFieldName}";
            refCheckBuilder.AppendLine($@"            if(storedData.{refFieldName} != data.{refFieldName} && data.{refFieldName} != 0 && !{refTableFieldName}.ContainsKey(data.{refFieldName})) 
                {tableFieldName}.RaiseException(""{errorMessage}"");");
        }

        var tableTypeName = table.QualifiedTypeName;
        sb.AppendLine($@"        // {DatabaseSourceGenerator.GenerationStamp()}
        private void CheckReferentialIntegrityOnModifiedFieldsOn{table.TypeName}({tableTypeName} data, {tableTypeName} storedData) {{
{refCheckBuilder}
        }}");
        sb.AppendLine();
    }

    private static void BuildAddMethod(StringBuilder sb, TableModel table)
    {
        var tableFieldName = table.FieldName;
        var refCheckBuilder = new StringBuilder();
        foreach (var refField in table.Fields)
        {
            if (!refField.IsReference) continue;
            var refTableFieldName = refField.ReferencedTableModel.FieldName;
            var errorMessage = $"{refField.Name} is not a valid reference to {refTableFieldName} ({{data.{refField.Name}}})";
            refCheckBuilder.AppendLine($@"            if(data.{refField.Name} != 0 && !{refTableFieldName}.ContainsKey(data.{refField.Name})) 
                {tableFieldName}.RaiseException($""{errorMessage}"");");
        }

        sb.AppendLine();
        var tableTypeName = table.QualifiedTypeName;
        sb.AppendLine($@"        // {DatabaseSourceGenerator.GenerationStamp()}
        private void CheckReferentialIntegrityOn{table.TypeName}({tableTypeName} data) {{
{refCheckBuilder}
        }}");
    }
}