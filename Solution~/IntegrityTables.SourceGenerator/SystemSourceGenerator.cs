using System.Collections.Generic;
using System.Linq;
using IntegrityTables.SourceGeneration.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace IntegrityTables.SourceGeneration;

public class SystemSourceGenerator
{
    public static void GenerateCode(SourceProductionContext context, DatabaseModel model)
    {
        foreach (var system in model.SystemModels)
        {
            GenerateSystemCode(context, model, system);
        }
    }

    private static void GenerateSystemCode(SourceProductionContext context, DatabaseModel model, SystemModel system)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using System;");
        sb.AppendLine("using IntegrityTables;");
        sb.AppendLine();

        if (!string.IsNullOrEmpty(system.NameSpace))
        {
            sb.AppendLine($"namespace {system.NameSpace}");
            sb.AppendLine("{");
        }

        sb.AppendLine($@"    // {DatabaseSourceGenerator.GenerationStamp()}
    public partial class {system.TypeName}
    {{
        private IdSet entities = new();");
        
        // Generate the parameterless Execute method
        GenerateExecuteMethod(sb, model, system);
        
        sb.AppendLine("    }");

        if (!string.IsNullOrEmpty(system.NameSpace))
        {
            sb.AppendLine("}");
        }

        var fileName = $"{system.TypeName}.System.g.cs";
        context.AddSource(fileName, SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static void GenerateExecuteMethod(StringBuilder sb, DatabaseModel model, SystemModel system)
    {
        sb.AppendLine(@"        public void Execute()
        {
            entities.Clear();");
        

        // Find the primary table to iterate over (first writable parameter, or first readable if no writable)
        var firstParam = system.Parameters[0];
        sb.AppendLine($"            entities.UnionWith(database.{firstParam.tableModel.FacadeName}.GetEntityIdSpan());");
        foreach (var param in system.Parameters.Skip(1))
        {
            if (!param.isList)
            {
                sb.AppendLine($"            entities.IntersectWith(database.{param.tableModel.FacadeName}.GetEntityIdSpan());");
            }
        }
        
        // Generate the method call
        sb.AppendLine(@$"            foreach(var entityId in entities) {{");
        
        var args = new List<string>();
                
        foreach (var param in system.Parameters)
        {
            if(param.isList)
            {
                sb.AppendLine($"                var {param.name} = database.{param.tableModel.FacadeName}.SelectByEntityId(entityId);");
                args.Add($"{param.name}");
            }
            else
            {
                sb.AppendLine($"                var {param.name} = database.{param.tableModel.FacadeName}.GetByEntityId(entityId);");
                args.Add($"{(param.isWrite?"ref":"in")} {param.name}");
            }           
        }
        sb.AppendLine(@$"                Execute({string.Join(", ", args)});");
        foreach (var param in system.Parameters)
        {
            if(param.isWrite)
            {
                sb.AppendLine($"                database.{param.tableModel.FacadeName}.Update(ref {param.name});");
            }
                   
        }
        sb.AppendLine(@$"            }}");
        sb.AppendLine(@$"        }}");

                
        
    }
}