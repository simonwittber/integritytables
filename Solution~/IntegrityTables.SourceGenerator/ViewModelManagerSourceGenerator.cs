using System.Text;
using IntegrityTables.SourceGeneration.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace IntegrityTables.SourceGeneration;

public static class ViewModelManagerSourceGenerator
{
    public static void GenerateViewModelManager(SourceProductionContext context, DatabaseModel model)
    {
        var sb = new StringBuilder();
        sb.AppendLine($@"// <auto-generated/> // {DatabaseSourceGenerator.GenerationStamp()}
using System;
using System.Collections.Generic;

using IntegrityTables;
");
        if (!string.IsNullOrEmpty(model.NameSpace))
        {
            sb.AppendLine($"namespace {model.NameSpace}");
            sb.AppendLine("{");
        }

        sb.AppendLine($@"
// {DatabaseSourceGenerator.GenerationStamp()}
public partial class {model.TypeName}ViewModelManager : IDisposable
{{
    public {model.QualifiedTypeName} db {{ get; private set; }}
{GenerateProperties(model)}    
    
    // {DatabaseSourceGenerator.GenerationStamp()}
    public {model.TypeName}ViewModelManager({model.QualifiedTypeName} db)
    {{
        this.db = db;
{GenerateInit(model)}
    }}

    // {DatabaseSourceGenerator.GenerationStamp()}
    public void Dispose()
    {{
{GenerateDisposeMethods(model)}
    }} 

{GenerateAfterRemoveMethods(model)}
}}
");
        if (!string.IsNullOrEmpty(model.NameSpace))
        {
            sb.AppendLine("}");
        }

        context.AddSource($"{model.FileName("ViewModelManager", model.TypeName)}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static string GenerateDisposeMethods(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var tableModel in model.Tables)
        {
            if (!tableModel.GenerateViewModel) continue;

            sb.AppendLine(@$"        {tableModel.TypeName}ViewModels?.Dispose();");
        }
        return sb.ToString();
    }

    private static string GenerateAfterRemoveMethods(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var tableModel in model.Tables)
        {
            if (!tableModel.GenerateViewModel) continue;
            sb.AppendLine($"    // {DatabaseSourceGenerator.GenerationStamp()}");
            sb.AppendLine(@$"    void On{tableModel.TypeName}Removed(in Row<{tableModel.QualifiedTypeName}> row) {{
        {tableModel.TypeName}ViewModels.Remove(row.id);
    }}");
        }
        return sb.ToString();
    }

    private static string GenerateProperties(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var tableModel in model.Tables)
        {
            if (!tableModel.GenerateViewModel) continue;

            sb.AppendLine($"    public {tableModel.QualifiedNameSpace}{tableModel.TypeName}ViewModelCollection {tableModel.TypeName}ViewModels {{ get; private set; }}");
        }

        return sb.ToString();
    }

    private static string GenerateInit(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var tableModel in model.Tables)
        {
            if (!tableModel.GenerateViewModel) continue;
            sb.AppendLine(@$"        {tableModel.TypeName}ViewModels = new {tableModel.QualifiedNameSpace}{tableModel.TypeName}ViewModelCollection(this);
        db.{tableModel.FacadeName}.AfterRemove += On{tableModel.TypeName}Removed;");
        }

        return sb.ToString();
    }
}