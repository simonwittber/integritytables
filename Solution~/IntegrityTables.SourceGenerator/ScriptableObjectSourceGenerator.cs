using System.Linq;
using System.Text;
using IntegrityTables.SourceGeneration.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace IntegrityTables.SourceGeneration;

internal class ScriptableObjectSourceGenerator
{
    public static void GenerateScriptableDatabaseCode(SourceProductionContext context, DatabaseModel model)
    {
        var sb = new StringBuilder();
        sb.AppendLine($@"
using System;
using System.Collections.Generic;
using UnityEngine;
using IntegrityTables;

namespace {model.NameSpace} {{
    
    [CreateAssetMenu(menuName = ""IntegrityTables/Scriptable Database"", fileName = ""ScriptableDatabase"")]
    public partial class {model.TypeName}Asset : ScriptableDatabase<{model.QualifiedTypeName}>, ISerializationCallbackReceiver
    {{
        public readonly Dictionary<Type, ScriptableView> views = new Dictionary<Type, ScriptableView>();
        public bool enableLogging = false;
{GenerateTableProperties(model)}
        
        public void OnEnable() {{
            if(enableLogging) {{
                Warnings.OnWarning -= LogWarning;
                Warnings.OnWarning += LogWarning;
                Warnings.OnLog -= Log;
                Warnings.OnLog += Log;
            }}
            SoftResetTables();
        }}

        void LogWarning(string msg) => Debug.LogWarning(msg);
        void Log(string msg) => Debug.Log(msg);

        public override ScriptableView[] AllViews 
        {{ 
            get
            {{
                return new ScriptableView[]
                {{
                    {string.Join(",\n                    ", model.Tables.Select(t => $"{t.TypeName}Table"))}
                }};
            }}
        }}

        public void SoftResetTables()
        {{
{GenerateTableSoftReset(model)}            
        }}

        public void Reset()
        {{
{GenerateTableReset(model)}
        }}

        public void OnAfterDeserialize() 
        {{
            database = new {model.TypeName}();
{GenerateTableLoaders(model)}
            database.ValidateIntegrity();
        }}

        public void OnBeforeSerialize()
        {{
            if(database == null) return;
{GenerateTableSave(model)}  
        }}
        
    }}
}}
");
        context.AddSource($"{model.TypeName}Asset.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static string GenerateTableSave(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach(var i in model.Tables)
            sb.AppendLine($"            {i.TypeName}RowData?.SetRows(database.{i.FacadeName}.ToArray());");
        return sb.ToString();
    }

    private static string GenerateTableLoaders(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var i in model.Tables)
        {
            sb.AppendLine($"            database.{i.FacadeName}.Load({i.TypeName}RowData.rows);");
            sb.AppendLine($"            views[typeof({i.QualifiedTypeName})] = {i.TypeName}Table;");
        }

        return sb.ToString();
    }
    
    private static string GenerateTableReset(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var i in model.Tables)
        {
            sb.AppendLine($"            {i.TypeName}Table = new(\"{i.TypeName}\", this);");
            sb.AppendLine($"            {i.TypeName}RowData = new();");
        }

        return sb.ToString();
    }
    
    private static string GenerateTableSoftReset(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var i in model.Tables)
        {
            sb.AppendLine($"            {i.TypeName}Table.name = \"{i.TypeName}\";");
            sb.AppendLine($"            {i.TypeName}Table.scriptableDatabaseAsset = this;");
            sb.AppendLine($"            if({i.TypeName}RowData == null) {i.TypeName}RowData = new();");
        }

        return sb.ToString();
    }

    private static string GenerateTableProperties(DatabaseModel model)
    {
        var sb = new StringBuilder();
        foreach (var i in model.Tables)
        {
            sb.AppendLine($"        [SerializeField] public {i.NameSpace}.{i.TypeName}ScriptableView {i.TypeName}Table;");
            sb.AppendLine($"        [SerializeField] public {i.NameSpace}.{i.TypeName}RowArray {i.TypeName}RowData;");
        }

        return sb.ToString();
    }

    public static void GenerateScriptableViewCode(SourceProductionContext context, DatabaseModel model)
    {
        foreach (var i in model.Tables)
        {
            var sb = new StringBuilder();
            sb.AppendLine($@"
// Auto-generated by IntegrityTables
using UnityEngine;
using System.Collections.Generic;
using IntegrityTables;

namespace {i.NameSpace} {{

    [System.Serializable]
    public class {i.TypeName}RowArray : RowArray<{i.QualifiedTypeName}> {{ }}
    
    [System.Serializable]
    public class {i.TypeName}ScriptableView : ScriptableView<{i.QualifiedTypeName}>
    {{
        public {model.TypeName}Asset scriptableDatabaseAsset;
        public {model.QualifiedTypeName} database => scriptableDatabaseAsset.database;
        protected override IReadOnlyTable<{i.QualifiedTypeName}> _table => scriptableDatabaseAsset.database.{i.FacadeName};

        public override void UpdateView()
        {{
            view = scriptableDatabaseAsset.database.{i.FacadeName}.ToList();
        }}

        public override void BeginEditing()
        {{
            scriptableDatabaseAsset.database.{i.FacadeName}.OnRowModified -= OnDatabaseRowModified;
            scriptableDatabaseAsset.database.{i.FacadeName}.OnRowModified += OnDatabaseRowModified;
        }}

        public override void EndEditing()
        {{
            scriptableDatabaseAsset.database.{i.FacadeName}.OnRowModified -= OnDatabaseRowModified;
        }}

        void OnDatabaseRowModified(int index, TableOperation op)
        {{
            switch(op)
            {{
                case TableOperation.Add:
                    view.Add(scriptableDatabaseAsset.database.{i.FacadeName}[index]);
                    break;
                case TableOperation.Remove:
                    view.RemoveAt(index);
                    break;
                case TableOperation.Update:
                    view[index] = scriptableDatabaseAsset.database.{i.FacadeName}[index];
                    break;
            }}
            OnRowModified?.Invoke(index);
        }}

        public {i.TypeName}ScriptableView(string tableName, {model.TypeName}Asset scriptableDatabaseAsset)
        {{
            this.name = tableName;
            this.scriptableDatabaseAsset = scriptableDatabaseAsset;
        }}

        public override ScriptableRow CreateRowObject(RowAdapter rowAdapter, int index) {{
            if(rowAdapter.row is Row<{i.QualifiedTypeName}> row) 
            {{
                var rowObject = ScriptableObject.CreateInstance<{i.QualifiedTypeName}ScriptableRowObject>();
                rowObject.index = index;
                rowObject.row = row;
                return rowObject;
            }}
            throw new System.InvalidOperationException($""Row is not of type Row<{i.QualifiedTypeName}>. {{rowAdapter.row.GetType()}}"");
        }}

        public override string TableGroup => ""{i.GroupName}"";

        public override ITableMetadata Metadata => new {i.TypeName}TableMetadata();

        public override void Clear() {{
            using(var changeSet = database.NewChangeSet())
            {{
                database.Clear<{i.QualifiedTypeName}>();
                changeSet.Commit();
            }}
        }}

        public override List<(string label, int id)> LookupTable(System.Type type) {{
            return scriptableDatabaseAsset.views[type].LookupTable();
        }}

        public override List<(string label, int id)> LookupTable() {{
            var list = new List<(string label, int id)>();
            var nameIndex = Metadata.IndexOf(""name"");
            if(nameIndex < 0)
            {{
                foreach (var row in database.{i.FacadeName})
                {{
                    var label = row.ToString();
                    list.Add((label, row.id));
                }}
            }} else {{
                foreach (var row in database.{i.FacadeName})
                {{
                    var label = $""#{{row.id}} {{Metadata.Get(row, nameIndex)}}"";
                    list.Add((label, row.id));
                }}
            }}
            return list;
        }}

        public override void UpdateRow(RowAdapter rowAdapter)
        {{
            var row = (Row<{i.QualifiedTypeName}>)rowAdapter.row;
            if(logDatabaseCalls) Debug.Log($""Update {i.QualifiedTypeName}: {{row}}"");
            database.Update(ref row);
            rowAdapter.row = row;
        }}

        public override object AddRow(RowAdapter rowAdapter)
        {{
            var row = (Row<{i.QualifiedTypeName}>)rowAdapter.row;
            if(logDatabaseCalls) Debug.Log($""Add {i.QualifiedTypeName}: {{row}}"");
            return database.Add(row.data);
        }}

        public override object AddRow()
        {{
            return database.Add(default({i.QualifiedTypeName}));
        }}

        public override void RemoveRow(int id)
        {{
            if(logDatabaseCalls) Debug.Log($""Remove {i.QualifiedTypeName}: {{id}}"");
            var stub = new Row<{i.QualifiedTypeName}> {{ id = id }};
            database.Remove(in stub);
        }}
    }}
}}

");
            context.AddSource($"{i.TypeName}ScriptableView.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }

    public static void GenerateScriptableRowCode(SourceProductionContext context, DatabaseModel model)
    {
        foreach (var i in model.Tables)
        {
            var sb = new StringBuilder();
            sb.AppendLine($@"
// Auto-generated by IntegrityTables
using UnityEngine;
using System.Collections.Generic;
using IntegrityTables;

namespace {i.NameSpace} {{
    public partial class {i.TypeName}ScriptableRowObject : ScriptableRow
    {{
        public Row<{i.QualifiedTypeName}> row;
        public override object Row {{ get => row; set => row = (Row<{i.QualifiedTypeName}>)value; }}
        
    }}
}}

");
            context.AddSource($"{i.TypeName}ScriptableRowObject.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }
}