using System.Collections.Generic;
using System.Linq;
using System.Text;
using IntegrityTables.SourceGeneration.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace IntegrityTables.SourceGeneration;

public class ServiceSourceGenerator 
{
    public static void GenerateCode(SourceProductionContext context, DatabaseModel model)
    {
        foreach (var serviceModel in model.ServiceModels)
        {
            var sb = new StringBuilder();
            sb.AppendLine($@"// <auto-generated/> //  {DatabaseSourceGenerator.GenerationStamp()}
using System;
using System.Collections.Generic;
using IntegrityTables;
");
            if (!string.IsNullOrEmpty(serviceModel.NameSpace))
            {
                sb.AppendLine($"namespace {serviceModel.NameSpace}");
                sb.AppendLine("{");
            }
            sb.AppendLine($@"
public partial class {serviceModel.TypeName} 
{{
    public {model.QualifiedTypeName} db {{ get; set; }}

    public void SetDatabase({model.QualifiedTypeName} db)
    {{
        if(this.db != null)
            DisconnectTriggers();
        this.db = db;
        if(this.db != null)
            ConnectTriggers();
    }}

{BuildPredicateMethods(model, serviceModel)}
    // {DatabaseSourceGenerator.GenerationStamp()}
    public void ConnectTriggers() 
    {{
        DisconnectTriggers(); // disconnect any existing triggers first
{BuildConnectTriggers(model, serviceModel)}
    }}
    // {DatabaseSourceGenerator.GenerationStamp()}
    public void DisconnectTriggers() 
    {{
{BuildDisconnectTriggers(model, serviceModel)}
    }}
    // {DatabaseSourceGenerator.GenerationStamp()}
    public void Dispose()
    {{
        if(db != null)
            DisconnectTriggers();
        db = default;
    }}

}}
");
            if (!string.IsNullOrEmpty(serviceModel.NameSpace))
            {
                sb.AppendLine("}//x");
            }
            
            context.AddSource($"{model.FileName("Service", serviceModel.TypeName)}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
        
    }

    private static string BuildPredicateMethods(DatabaseModel model, ServiceModel serviceModel)
    { 
        var lines = new List<string>();
        
        foreach (var triggerModel in serviceModel.Triggers)
        {
            
            var parameters = string.Join(", ", Enumerable.Range(0, triggerModel.RefKinds.Length).Select(i => $"{triggerModel.RefKinds[i].ToString().ToLower()} Row<{triggerModel.TableModel.QualifiedTypeName}> row{i}"));
            var arguments = string.Join(", ", Enumerable.Range(0, triggerModel.RefKinds.Length).Select(i => $"{triggerModel.RefKinds[i].ToString().ToLower()} row{i}"));
            if (triggerModel.IsFieldTrigger)
            {
                var changedField = triggerModel.FieldName;
                var predicate = $"if(row0.data.{changedField} != row1.data.{changedField})";
                lines.Add($"    private void Predicated{triggerModel.Method.Name}({parameters}) {{ {predicate} {triggerModel.Method.Name}({arguments}); }}");
            }
        }
        return string.Join("\n", lines);
    }

    private static string BuildConnectTriggers(DatabaseModel model, ServiceModel serviceModel)
    {
        var lines = new List<string>();
        
        foreach (var triggerModel in serviceModel.Triggers)
        {
            
            if (triggerModel.IsFieldTrigger)
            {
                var changedField = triggerModel.FieldName;
                lines.Add($"        // this is a field level trigger for '{serviceModel.TypeName}.{changedField}'");
                lines.Add($"        db.{triggerModel.TableModel.FacadeName}.{triggerModel.EventName} += Predicated{triggerModel.Method.Name};");
            }
            else
            {
                lines.Add($"        // this is a row level trigger for '{serviceModel.TypeName}'");
                lines.Add($"        db.{triggerModel.TableModel.FacadeName}.{triggerModel.EventName} += {triggerModel.Method.Name};");
            }
        }
        return string.Join("\n", lines);
    }
    
    private static string BuildDisconnectTriggers(DatabaseModel model, ServiceModel serviceModel)
    {
        var lines = new List<string>();
        
        foreach (var triggerModel in serviceModel.Triggers)
        {
            if (triggerModel.IsFieldTrigger)
            {
                lines.Add($"        db.{triggerModel.TableModel.FacadeName}.{triggerModel.EventName} -= Predicated{triggerModel.Method.Name};");
            }
            else
            {
                lines.Add($"        db.{triggerModel.TableModel.FacadeName}.{triggerModel.EventName} -= {triggerModel.Method.Name};");
            }
        }
        return string.Join("\n", lines);
    }

}