using System.Text;
using IntegrityTables.SourceGeneration.Model;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace IntegrityTables.SourceGeneration;

public class TableIndexSourceGenerator
{
    public static void GenerateCode(SourceProductionContext context, DatabaseModel model)
    {
        foreach (var table in model.Tables)
        {
            var sb = new StringBuilder();
            sb.AppendLine($@"// <auto-generated/> // {DatabaseSourceGenerator.GenerationStamp()}
using System;
using System.Collections.Generic;
using IntegrityTables;

");
            if (!string.IsNullOrEmpty(table.NameSpace))
            {
                sb.AppendLine($"namespace {table.NameSpace}");
                sb.AppendLine("{");
            }

            sb.AppendLine($@"
    // {DatabaseSourceGenerator.GenerationStamp()}
    public class {table.TypeName}TableIndex
    {{
        
        Table<{table.QualifiedTypeName}> _table;
        int _capacity;
{GenerateFields(context, table)}        
        
        // {DatabaseSourceGenerator.GenerationStamp()}
        public {table.TypeName}TableIndex(Table<{table.QualifiedTypeName}> table, int capacity = 1024)
        {{
            this._table = table;
            this._capacity = capacity;
            _table.AfterAdd += (-1, AfterAdd);
            _table.AfterUpdate += (-1, AfterUpdate);
            _table.AfterRemove += (-1, AfterRemove);
        }}

        // {DatabaseSourceGenerator.GenerationStamp()}
        void AfterAdd(in Row<{table.QualifiedTypeName}> row)
        {{
{GenerateAddToIndex(context, table)}                
        }}

        // {DatabaseSourceGenerator.GenerationStamp()}
        void AfterUpdate(in Row<{table.QualifiedTypeName}> oldRow, in Row<{table.QualifiedTypeName}> newRow)
        {{
{GenerateUpdateIndex(context, table)}                
        }}

        // {DatabaseSourceGenerator.GenerationStamp()}
        void AfterRemove(in Row<{table.QualifiedTypeName}> row)
        {{
{GenerateRemoveFromIndex(context, table)}                
        }}

{GenerateIndexMethods(context, table)}
    }}

    // {DatabaseSourceGenerator.GenerationStamp()}
    public static class {table.TypeName}TableIndexExtensions {{
{GenerateIndexExtensions(context, table)}
    }}
");
            if (!string.IsNullOrEmpty(table.NameSpace)) sb.AppendLine("}");
            context.AddSource($"{model.FileName("TableIndex", table.TypeName)}.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }

    private static string GenerateAddToIndex(SourceProductionContext context, TableModel table)
    {
        var sb = new StringBuilder();
        foreach (var field in table.Fields)
        {
            if (field.IsReference)
            {
                if (field.IsUnique) // is 1 to 1
                    sb.AppendLine(@$"            map_{field.Name}[row.data.{field.Name}] = row.id;");
                sb.AppendLine(@$"            GetOrCreateList_{field.Name}(row.data.{field.Name}).Add(row.id);");
            }
        }

        return sb.ToString();
    }

    private static string GenerateUpdateIndex(SourceProductionContext context, TableModel table)
    {
        var sb = new StringBuilder();
        foreach (var field in table.Fields)
        {
            if (field.IsReference)
            {
                if (field.IsUnique) // is 1 to 1
                    sb.AppendLine(@$"            map_{field.Name}[oldRow.data.{field.Name}] = newRow.id;");
                sb.AppendLine(@$"            if(oldRow.data.{field.Name} != newRow.data.{field.Name})
            {{
                {field.Name}[oldRow.data.{field.Name}].Remove(oldRow.id);
                GetOrCreateList_{field.Name}(newRow.data.{field.Name}).Add(newRow.id);
            }}");
            }
        }

        return sb.ToString();
    }

    private static string GenerateRemoveFromIndex(SourceProductionContext context, TableModel table)
    {
        var sb = new StringBuilder();
        foreach (var field in table.Fields)
        {
            if (field.IsReference)
            {
                if (field.IsUnique) // 1 to 1
                {
                    sb.AppendLine($"            map_{field.Name}.Remove(row.data.{field.Name});");
                }
                sb.AppendLine($"            {field.Name}[row.data.{field.Name}].Remove(row.id);");
            }
        }

        return sb.ToString();
    }

    private static string GenerateIndexMethods(SourceProductionContext context, TableModel table)
    {
        var sb = new StringBuilder();
        foreach (var field in table.Fields)
        {
            if (field.IsReference)
            {
                if (field.IsUnique) // 1 to 1
                {
                    sb.AppendLine($@"
        // {DatabaseSourceGenerator.GenerationStamp()}
        public {field.QualifiedTypeName} GetBy{field.CapitalizedName}({field.QualifiedTypeName} id) 
        {{
            return map_{field.Name}[id];
        }}

        // {DatabaseSourceGenerator.GenerationStamp()}
        public bool TryGetBy{field.CapitalizedName}({field.QualifiedTypeName} id, out {field.QualifiedTypeName} value) 
        {{
            return map_{field.Name}.TryGetValue(id, out value);
        }}");
                }

                sb.AppendLine($@"
        // {DatabaseSourceGenerator.GenerationStamp()}
        private ObservableList<{field.QualifiedTypeName}> GetOrCreateList_{field.Name}({field.QualifiedTypeName} id) 
        {{
            if(!{field.Name}.TryGetValue(id, out var list))
                {field.Name}[id] = list = new();
            return list;
        }}

        // {DatabaseSourceGenerator.GenerationStamp()}
        public ObservableList<{field.QualifiedTypeName}> SelectBy{field.CapitalizedName}({field.QualifiedTypeName} id) 
        {{
            return GetOrCreateList_{field.Name}(id);
        }}

        // {DatabaseSourceGenerator.GenerationStamp()}
        public bool TrySelectBy{field.CapitalizedName}({field.QualifiedTypeName} id, out ObservableList<{field.QualifiedTypeName}> values) 
        {{
            return {field.Name}.TryGetValue(id, out values);
        }}");
            }
        }

        return sb.ToString();
    }

    private static string GenerateIndexExtensions(SourceProductionContext context, TableModel table)
    {
        var sb = new StringBuilder();
        foreach (var field in table.Fields)
        {
            if (field.IsReference)
            {
                if (field.IsUnique) // 1 to 1
                {
                    sb.AppendLine($@"
            // {DatabaseSourceGenerator.GenerationStamp()}
            public static Row<{table.TypeName}> GetBy{field.CapitalizedName}(this Table<{table.TypeName}> table, {field.QualifiedTypeName} id) 
            {{
                var db = Context<{table.DatabaseModel.DatabaseSymbol.Name}>.Current;
                var pk = db.{field.TableModel.FacadeName}Index.GetBy{field.CapitalizedName}(id);
                return table.Get(pk);
            }}

            // {DatabaseSourceGenerator.GenerationStamp()}
            public static bool TryGetBy{field.CapitalizedName}(this Table<{table.TypeName}> table, {field.QualifiedTypeName} id, out Row<{table.TypeName}> value) 
            {{
                var db = Context<{table.DatabaseModel.DatabaseSymbol.Name}>.Current;
                if(db.{field.TableModel.FacadeName}Index.TryGetBy{field.CapitalizedName}(id, out var pk))
                {{
                    return table.TryGet(pk, out value);
                }}      
                value = default;
                return false;
            }}
            ");
                }

                sb.AppendLine($@"
            // {DatabaseSourceGenerator.GenerationStamp()}
            public static ObservableList<{field.QualifiedTypeName}> SelectBy{field.CapitalizedName}(this Table<{table.TypeName}> table, {field.QualifiedTypeName} id) 
            {{
                var db = Context<{table.DatabaseModel.DatabaseSymbol.Name}>.Current;
                return db.{field.TableModel.FacadeName}Index.SelectBy{field.CapitalizedName}(id);
            }}

            // {DatabaseSourceGenerator.GenerationStamp()}
            public static bool TrySelectBy{field.CapitalizedName}(this Table<{table.TypeName}> table, {field.QualifiedTypeName} id, out ObservableList<{field.QualifiedTypeName}> values) 
            {{
                var db = Context<{table.DatabaseModel.DatabaseSymbol.Name}>.Current;
                return db.{field.TableModel.FacadeName}Index.TrySelectBy{field.CapitalizedName}(id, out values);
            }}
            ");
            }
        }

        return sb.ToString();
    }

    private static string GenerateFields(SourceProductionContext context, TableModel table)
    {
        var sb = new StringBuilder();
        foreach (var field in table.Fields)
        {
            if (field.IsReference)
            {
                // if field is Unique, this is a one to one relationship, otherwise it's a one to many relationship
                if (field.IsUnique)
                    sb.AppendLine($"        private Dictionary<int, int> map_{field.Name} = new(); // {field.Name} is a 1 to 1 relationship, so we use a map to provide the GetBy methods, and the list below for Observability");
                sb.AppendLine($"        private Dictionary<int, ObservableList<int>> {field.Name} = new();");
            }
        }

        return sb.ToString();
    }
}